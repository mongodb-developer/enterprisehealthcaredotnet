@page "/patient/{id}"
@using EnterpriseHealthcareDotNet.Models
@using EnterpriseHealthcareDotNet.Services
@using MongoDB.Bson
@inject MongoDBService MongoDbService
@inject NavigationManager NavigationManager

<h3>Patient Details</h3>

@if (patient == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <p><strong>Name:</strong> @patient.PatientName</p>
        <p><strong>Date of Birth:</strong> @patient.DateOfBirth?.ToShortDateString()</p>
        <p><strong>Health Conditions: </strong></p>
        <table class="table table-hover table-responsive-sm">
            <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Status</th>
            </tr>
            </thead>
            <tbody>
            @if(patient.PatientRecord.HealthConditions == null || !patient.PatientRecord.HealthConditions.Any())
            {
                <tr>
                    <td colspan="3">No health conditions found.</td>
                </tr>
            }
            else
            {
                @foreach (var condition in patient.PatientRecord.HealthConditions)
                {
                    <tr>
                        <td>@condition.Name</td>
                        <td>@condition.Date.ToShortDateString()</td>
                        <td>@condition.Status</td>
                    </tr>
                }
            }
            </tbody>
        </table>

        <button class="btn btn-danger btn-sm" @onclick="() => DeletePatient(patient.Id)">Delete</button>

    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Patient? patient;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            patient = await MongoDbService.GetPatientAsync(Id);
        }
    }
    
    private async Task DeletePatient(ObjectId patientId)
    {
        await MongoDbService.DeletePatientAsync(patientId.ToString());
        NavigationManager.NavigateTo("/patients");
    }
}